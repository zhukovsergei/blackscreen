name: Production

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.prod
          no-cache: true
          push: true
          build-args: |
            GA_ID=${{ secrets.GA_ID }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/blackscreen-app:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/blackscreen-app:${{ github.sha }}

      - name: Deploy to Vultr
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VULTR_HOST }}
          username: ${{ secrets.VULTR_USERNAME }}
          key: ${{ secrets.VULTR_SSH_KEY }}
          script: |
            mkdir -p /opt/blackscreen
            
            cat > /opt/blackscreen/docker-compose.yml << 'EOL'
            services:
              traefik:
                image: traefik:v2.10
                container_name: traefik-prod
                command:
                  - "--api.insecure=false"
                  - "--providers.docker=true"
                  - "--providers.docker.exposedbydefault=false"
                  - "--entrypoints.web.address=:80"
                  - "--entrypoints.websecure.address=:443"
                  - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
                  - "--certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_EMAIL}"
                  - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
                  - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
                  - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
                  - "--api=true"
                  - "--api.dashboard=false"
                  - "--ping=true"
                ports:
                  - "80:80"
                  - "443:443"
                volumes:
                  - "/var/run/docker.sock:/var/run/docker.sock:ro"
                  - "letsencrypt:/letsencrypt"
                networks:
                  - web
                restart: always
                healthcheck:
                  test: ["CMD", "wget", "--spider", "--no-verbose", "http://localhost:8080/ping"]
                  interval: 10s
                  timeout: 5s
                  retries: 3

              app:
                image: ${DOCKERHUB_USERNAME}/blackscreen-app:latest
                container_name: blackscreen-prod
                expose:
                  - "4173"
                restart: always
                depends_on:
                  traefik:
                    condition: service_healthy
                labels:
                  - "traefik.enable=true"
                  - "traefik.http.routers.app.rule=Host(`${DOMAIN_NAME}`)"
                  - "traefik.http.routers.app.entrypoints=websecure"
                  - "traefik.http.routers.app.tls.certresolver=myresolver"
                  - "traefik.http.services.app.loadbalancer.server.port=4173"
                networks:
                  - web
                healthcheck:
                  test: ["CMD", "wget", "--spider", "--no-verbose", "http://localhost:4173"]
                  interval: 10s
                  timeout: 5s
                  retries: 3
                  start_period: 20s

            networks:
              web:
                driver: bridge

            volumes:
              letsencrypt:
            EOL
            
            sed -i "s/\${DOCKERHUB_USERNAME}/${{ secrets.DOCKERHUB_USERNAME }}/g" /opt/blackscreen/docker-compose.yml
            sed -i "s/\${LETSENCRYPT_EMAIL}/${{ secrets.LETSENCRYPT_EMAIL }}/g" /opt/blackscreen/docker-compose.yml
            sed -i "s/\${DOMAIN_NAME}/${{ secrets.DOMAIN_NAME }}/g" /opt/blackscreen/docker-compose.yml
            
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin || {
              echo "Login error to Docker Hub"
              exit 1
            }

            cd /opt/blackscreen || {
              echo "no blackscreen folder"
              exit 1
            }
            
            echo "Stopping existing containers..."
            docker ps -q --filter "name=blackscreen-prod" | xargs -r docker stop
            docker ps -q --filter "name=blackscreen-prod" | xargs -r docker rm

            echo "Remove old images"
            docker rmi -f ${{ secrets.DOCKERHUB_USERNAME }}/blackscreen-app:latest || true
            
            docker compose pull || {
              echo "docker pull error"
              exit 1
            }
            
            docker compose up -d --force-recreate || {
              echo "Error on docker up"
              exit 1
            }
            
            docker ps | grep blackscreen-prod || {
              echo "blackscreen-prod is not up"
              docker compose logs
              exit 1
            }
            
            docker image prune -af